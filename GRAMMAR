circuit =
  version , newline ,
  "circuit" , id , ":" , [ annotations ] , [ info ] , newline , indent ,
    { decl } ,
  dedent ;

decl =
    decl_module
  | decl_extmodule
  | decl_layer
  | decl_formal
  | decl_type_alias ;

decl_module =
  "module" , id , { enablelayer } , ":" , [ info ] , newline ,
  indent ,
    { port , newline } ,
    { statement } ,
  dedent ;

decl_extmodule =
  "extmodule" , id , ":" , [ info ] , newline , indent ,
    { port , newline } ,
    [ "defname" , "=" , id , newline ] ,
    { "parameter" , id , "=" , type_param , newline } ,
  dedent ;

decl_layer =
  "layer" , id , "," , id , "," , string , ":" , [ info ] , newline , [ indent ,
      { decl_layer },
  dedent ]
  | "skip" , newline ;

decl_formal =
  "formal" , id , "of" , id , ":" , [ info ] , newline , indent ,
    { id , "=" , decl_formal_param , newline } ,
  dedent ;
decl_formal_param =
    int
  | string_dq
  | string_sq
  | "[" , [ decl_formal_param , { "," , decl_formal_param } ] , "]"
  | "{" , [ id , "=" , decl_formal_param , { "," , id , "=" , decl_formal_param } ] , "}" ;

decl_type_alias = "type", id, "=", type ;

port = ( "input" | "output" ) , id , ":" , (type | type_property) , [ info ] ;
type_param = int | string_dq | string_sq ;
type_property = "Integer" | "List" , "<" , type_property , ">";

statement =
    circuit_component , newline
  | connectlike , newline
  | command, newline
  | skip , newline
  | layerblock
  | conditional
  ;

circuit_component =
    circuit_component_node
  | circuit_component_wire
  | circuit_component_reg
  | circuit_component_inst
  | circuit_component_mem
  | circuit_component_infermport
  | circuit_component_cmem ;

circuit_component_node = "node" , id , "=" , expr , [ info ] ;
circuit_component_wire = "wire" , id , ":" , type , [ info ] ;
circuit_component_inst = "inst" , id , "of" , id , [ info ] ;
circuit_component_cmem = "cmem" , id ,  ":" , type , [ info ] ;
circuit_component_infermport = "infer" , "mport" , id , "=" , id , "[" , id , "]" , "," , reference , [ info ] ;


circuit_component_reg =
    "reg" , id , ":" , type , "," , expr , [ info ]
  | "regreset" , id , ":" , type , "," , expr , "," , expr , "," , expr , [info] ;

circuit_component_mem =
  "mem" , id , ":" , [ info ] , newline , indent ,
    "data-type" , "=>" , type , newline ,
    "depth" , "=>" , int , newline ,
    "read-latency" , "=>" , int , newline ,
    "write-latency" , "=>" , int , newline ,
    "read-under-write" , "=>" , read_under_write , newline ,
    { "reader" , "=>" , id , newline } ,
    { "writer" , "=>" , id , newline } ,
    { "readwriter" , "=>" , id , newline } ,
  dedent ;

read_under_write =  "old" | "new" | "undefined" ;

connectlike =
    "connect" , reference , "," , expr , [ info ]
  | reference , "<=" , expr , [ info ]
  | reference , "is" , "invalid" , [ info ]
  | "invalidate" , reference , [ info ]
  | "attach" , "(" , reference , { "," ,  reference } , ")" , [ info ]
  | "define" , reference , "=" , expr_probe , [ info ]
  | "propassign" , reference , "," , property_expr , [ info ] ;

conditional =
    conditional_when
  | conditional_match ;

conditional_when =
  "when" , expr , ":" , [ info ] , newline ,
    indent ,
        statement , { statement } , dedent ,
  [ "else" , ":" , newline , indent , statement , { statement } , dedent ] ;

conditional_match =
  "match" , expr , ":" , [ info ] , newline ,
  [ indent , { conditional_match_branch } , dedent ] ;

conditional_match_branch =
  id , [ "(" , id , ")" ] , ":" , newline ,
  [ indent , { statement } , dedent ] ;

command =
    "stop" , "(" , expr , "," , expr , "," , int , ")" , [ info ]
  | "force" , "(" , expr , "," , expr , "," , expr_probe , "," , expr , ")"
  | "force_initial" , "(" , expr_probe , "," , expr , ")"
  | "release" , "(" , expr , "," , expr , "," , expr_probe , ")"
  | "release_initial" , "(" , expr_probe , ")"
  | expr_intrinsic , [ info ]
  | "printf" , "(" ,
        expr , "," ,
        expr , "," ,
        string_dq ,
        { "," , expr }
    , ")" ,
    [ ":" , id ] , [ info ]
  | "fprintf" , "(" ,
        expr , "," ,
        expr , "," ,
        string_dq ,
        { "," , expr } ,
        "," ,
        string_dq ,
        { "," , expr }
    , ")" ,
    [ ":" , id ] , [ info ]
  | "fflush" , "(" ,
        expr , "," ,
        expr , [ "," ,
        string_dq ,
        { "," , expr } ]
    , ")" ,
    [ ":" , id ] , [ info ]
  | "assert" , "(" ,
        expr , "," ,
        expr , "," ,
        expr , "," ,
        string_dq ,
        { "," , expr }
    , ")" ,
    [ ":" , id ] , [ info ]
  | "assume" , "(" ,
        expr , "," ,
        expr , "," ,
        expr , "," ,
        string_dq ,
        { "," , expr }
    , ")" ,
    [ ":" , id ] , [ info ]
  | "cover" , "(" ,
        expr , "," ,
        expr , "," ,
        expr , "," ,
        string_dq
    , ")" ,
    [ ":" , id ] , [ info ] ;

layerblock =
  "layerblock" , id ,  ":" , [ info ] , newline , indent ,
    { port , newline } ,
    { statement } ,
  dedent ;

skip = "skip" , [ info ] ;

reference =
    id
  | reference , "." , ( id | "bits" )
  | reference , "[" , int , "]"
  | reference , "[" , expr , "]" ;

expr =
    expr_reference
  | expr_lit
  | expr_enum
  | expr_mux
  | expr_read
  | expr_primop
  | expr_intrinsic ;

expr_reference = reference ;
expr_lit = ( "UInt" | "SInt" ) , [ width ] , "(" , ( int | string ) , ")" ;
expr_enum = type_enum , "(" , id , [ "," , expr ] , ")" ;
expr_mux = "mux" , "(" , expr , "," , expr , "," , expr , ")" ;
expr_read = "read" , "(" , expr_probe , ")" ;

expr_probe =
  "probe" , "(" , reference , ")"
  | "rwprobe" , "(" , reference , ")"
  | reference ;

property_literal_expr = "Integer", "(", int, ")" ;
property_expr = reference | property_literal_expr | property_expr_primop ;
property_expr_primop = property_primop_2expr | property_primop_varexpr;
expr_primop = primop_2expr | primop_1expr | primop_1expr1int | primop_1expr2int ;

expr_intrinsic = "intrinsic", "(" , id ,
  [ expr_intrinsic_bracket ] , "," ,
  [ ":" , type ] ,
  expr , { "," , expr } , ")" ;

expr_intrinsic_bracket =
      "<" , id , "=" , expr_intrinsic_assign , { "," , id , "=" , expr_intrinsic_assign } , ">"
    | "<" , id , "=" , expr_intrinsic_assign  , ">" ;

expr_intrinsic_assign = int | string ;

type = ( type_hardware ) | type_probe ;

type_hardware =
    type_ground
  | type_bundle
  | type_vec
  | type_enum
  | id ;

type_ground =  type_ground_nowidth | type_ground_width ;

type_ground_nowidth =
    "Clock"
  | "Reset"
  | "AsyncReset" ;

type_ground_width =
    "UInt" , [ width ]
  | "SInt" , [ width ]
  | "Analog" , [ width ] ;

width = "<" , int , ">" ;

type_bundle = "{" , type_bundle_field , { "," , type_bundle_field } , "}"
            | "{" ,  "}" ;
type_bundle_field = [ "flip" ] , ( id | "bits" ) , ":" , type ;

type_vec = type , "[" , int , "]" ;

type_enum = "{|" , { type_enum_alt } , "|}" ;
type_enum_alt = id, [ ":" , type_constable ] ;

type_probe = ( "Probe" | "RWProbe" ) , "<", type , [ "," , id ] , ">" ;

primop_2expr     = primop_2expr_keyword , "(" , expr , "," , expr , ")" ;
primop_1expr     = primop_1expr_keyword , "(" , expr , ")" ;
primop_1expr1int = primop_1expr1int_keyword , "(", expr , "," , int , ")" ;
primop_1expr2int = primop_1expr2int_keyword , "(" , expr , "," , int , "," , int , ")" ;

property_primop_2expr = property_primop_2expr_keyword ,
                          "(" , property_expr , "," , property_expr , ")" ;

property_primop_varexpr = property_primop_varexpr_keyword ,
                            "(" , { property_expr } , ")" ;

enablelayer = "enablelayer" , id , { "." , id } ;

primop_1expr_keyword =
    "asUInt" | "asSInt" | "asClock" | "asAsyncReset" | "cvt"
  | "neg"    | "not"
  | "andr"   | "orr"    | "xorr" ;

primop_1expr2int_keyword = "bits" ;

primop_2expr_keyword =
    "add"  | "sub" | "mul" | "div" | "rem"
  | "lt"   | "leq" | "gt"  | "geq" | "eq" | "neq"
  | "dshl" | "dshr"
  | "and"  | "or"  | "xor" | "cat" ;

primop_1expr1int_keyword =
    "pad" | "shl" | "shr" | "head" | "tail" ;
